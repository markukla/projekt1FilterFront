// orginal css of drawing before changin drag and drop to allow rotate input elements by tranform

#mainContainer {

}
#drawingContainer {
 /* background-image: url('W702L_V_prawie_ostateczna.png');*/
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  width: 800px;
  height: 600px;

}
/**/
.dimensionInputHorizontal {
  height: 100%;
  position: absolute;
  text-align: center; /* Optional */
  width: 100%;

}
.inputDivHorizontal {
  position: relative;
  width: 60px;
  height: 20px;


}
.dimensionInputVertical {
  height: 100%;
  position: absolute;
  text-align: center; /* Optional */
  width: 100%;
}

.inputDivVertical {
  display: inline-block;
  position: relative;
  width: 20px;
  height: 60px;
}
#tableContainer {

}
#createFormContainer {

}

table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
// orginal input creating
 onSubmitForInputCreating(): void {

    const input = this.renderer.createElement('input');
    const inputDiv = this.renderer.createElement('div');
    this.renderer.setProperty(input, 'value', this.idValue);
    this.renderer.setProperty(input, 'id', this.idValue);
    // this.renderer.setProperty(input, 'type', 'number');
    console.log(`inputId= ${input.id}`);
    if (this.dimensionOrientation.value === 'horizontal') {
      input.className = 'dimensionInputHorizontal';
      inputDiv.className = 'inputDivHorizontal';
    } else if (this.dimensionOrientation.value === 'vertical') {
      input.className = 'dimensionInputVertical';
      inputDiv.className = 'inputDivVertical';
    }
    /* const drawing = document.getElementById('drawingContainer'); */
    this.renderer.appendChild(inputDiv, input);
    this.renderer.appendChild(this.drawing.nativeElement, inputDiv);
    this.makeInputDivDragable(inputDiv);


  }
